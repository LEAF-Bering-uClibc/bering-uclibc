<File buildtool.mk>
	Server = localrepo
	directory = easyrsa
	revision = HEAD
</File>

<File easy-rsa-2.2.0_master.tar.gz>
	Server = localrepo
	envname = EASYRSA_SOURCE
	directory = easyrsa
	revision = HEAD
</File>

<Package>
	<easyrsa>
		Version  = 2.2.0
		Revision = 1

		Help <<EOF
			This is a small RSA key management package, based on the openssl command line
			tool, that can be found in the easy-rsa subdirectory
			Homepage: http://www.openvpn.net/
			Requires: openssl.lrp
			LEAF package by __PACKAGER__, __BUILDDATE__

			INSTALL

			1. Edit /etc/easyrsa/vars.
			2. Set KEY_CONFIG to point to the openssl.cnf
			   file included in this distribution.
			3. Set KEY_DIR to point to a directory which will
			   contain all keys, certificates, etc.  This
			   directory need not exist, and if it does,
			   it will be deleted with rm -rf, so BE
			   CAREFUL how you set KEY_DIR.
			4. (Optional) Edit other fields in vars
			    per your site data.  You may want to
			    increase KEY_SIZE to 2048 if you are
			    paranoid and don't mind slower key
			    processing, but certainly 1024 is
			    fine for testing purposes.  KEY_SIZE
			    must be compatible across both peers
			    participating in a secure SSL/TLS
			    connection.
			5  . vars
			6. ./clean-all
			7. As you create certificates, keys, and
			   certificate signing requests, understand that
			   only .key files should be kept confidential.
			   .crt and .csr files can be sent over insecure
			   channels such as plaintext email.

		  IMPORTANT

		  To avoid a possible Man-in-the-Middle attack where an
		  authorized client tries to connect to another client by
		  impersonating the server, make sure to enforce some kind
		  of server certificate verification by clients.  There are
		  currently four different ways of accomplishing this,
		  listed in the order of preference:

		  (1) Build your server certificates with the
		      using the --server option to pkitool.
		      This will designate the certificate as a
		      server-only certificate by setting
		      nsCertType=server.
		      Now add the following line to your
		      client configuration:

		      ns-cert-type server

		      This will block clients from connecting to any
		      server which lacks the nsCertType=server designation
		      in its certificate, even if the certificate has been
		      signed by the CA which is cited in the OpenVPN
		      configuration file (--ca directive).

		  (2) Use the --tls-remote directive on the client to
		      accept/reject the server connection based on the
		      common name of the server certificate.

		  (3) Use a --tls-verify script or plugin to accept/reject
		      the server connection based on a custom test of the
		      server certificate's embedded X509 subject details.

		  (4) Sign server certificates with one CA and client
		      certificates with a different CA. The client config
		      "ca" directive should reference the server-signing CA
		      while the server config "ca" directive should
		      reference the client-signing CA.

		  NOTES

		   Show certificate fields:
		      openssl x509 -in cert.crt -text

		  PKITOOL documentation
		  Typical usage for initial PKI setup.  Build myserver,
		  client1, and client2 cert/keys.
		  Protect client2 key with a password.  Build DH parms.
		  Generated files in ./keys :
		  [edit vars with your site-specific info]
		  source ./vars
		  ./clean-all
		  ./build-dh     -> takes a long time, consider
		   backgrounding
		  ./pkitool --initca
		  ./pkitool --server myserver
		  ./pkitool client1
		  ./pkitool --pass client2

		  Typical usage for adding client cert to existing PKI:
		  source ./vars
		  ./pkitool client-new

			EOF

		<Permissions>
			Files = 644
			Directories = 755
		</Permissions>

		<Owner>
			Files = root:root
			Directories = root:root
		</Owner>

		<DependsOn>
			Package = openssl
		</DependsOn>

		<Contents>

			<File>
				Filename 	= usr/sbin/clean-all
				Source		= usr/sbin/clean-all
				Type		= binary
				Permissions	= 755
			</File>

			<File>
				Filename 	= usr/sbin/list-crl
				Source		= usr/sbin/list-crl
				Type		= binary
				Permissions	= 755
			</File>
			<File>
				Filename 	= usr/sbin/revoke-full
				Source		= usr/sbin/revoke-full
				Type		= binary
				Permissions	= 755
			</File>

			<File>
				Filename 	= etc/easyrsa/vars
				Source		= etc/easyrsa/vars
				Description     = easy-rsa parameter settings 
				Type		= binary
				Type		= local
				Type		= conf
				Permissions	= 644
			</File>
			<File>
				Filename 	= etc/easyrsa/openssl.cnf
				Source		= etc/easyrsa/openssl.cnf
				Description     = openssl settings 
				Type		= binary
				Type		= local
				Type		= conf
				Permissions	= 644
			</File>
			<File>
				Filename 	= usr/sbin/inherit-inter
				Source		= usr/sbin/inherit-inter
				Type		= binary
				Permissions	= 755
			</File>

			<File>
				Filename 	= usr/sbin/pkitool
				Source		= usr/sbin/pkitool
				Type		= binary
				Permissions	= 755
			</File>
			<File>
				Filename 	= usr/sbin/build-dh
				Source		= usr/sbin/build-dh
				Type		= binary
				Permissions	= 755
			</File>
			<File>
				Filename 	= usr/sbin/build-ca
				Source		= usr/sbin/build-ca
				Type		= binary
				Permissions	= 755
			</File>
			<File>
				Filename 	= usr/sbin/sign-req
				Source		= usr/sbin/sign-req
				Type		= binary
				Permissions	= 755
			</File>
		</Contents>
	</easyrsa>
</Package>

