diff -aur mbus-0.1.2.orig/configure.in mbus-0.1.3/configure.in
--- mbus-0.1.2.orig/configure.in	2003-09-27 15:57:37.000000000 +0300
+++ mbus-0.1.3/configure.in	2011-08-09 20:14:31.000000000 +0300
@@ -1,7 +1,7 @@
 dnl Process this file with autoconf to produce a configure script.
 
 AC_INIT(configure.in)
-AM_INIT_AUTOMAKE(mbusd, 0.1.2)
+AM_INIT_AUTOMAKE(mbusd, 0.1.3)
 AM_CONFIG_HEADER(config.h)
 
 AC_ISC_POSIX
diff -aur mbus-0.1.2.orig/src/conn.c mbus-0.1.3/src/conn.c
--- mbus-0.1.2.orig/src/conn.c	2003-09-13 23:38:33.000000000 +0300
+++ mbus-0.1.3/src/conn.c	2011-08-14 17:29:48.800089288 +0300
@@ -46,7 +46,7 @@
 
 void conn_tty_start(ttydata_t *tty, conn_t *conn);
 ssize_t conn_read(int d, void *buf, size_t nbytes);
-ssize_t conn_write(int d, void *buf, size_t nbytes);
+ssize_t conn_write(int d, void *buf, size_t nbytes, int istty);
 int conn_select(int nfds, 
                 fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                 struct timeval *timeout);
@@ -70,7 +70,7 @@
   if (tty_open(&tty) != RC_OK)
   {
 #ifdef LOG
-    log(0, "conn_init():"
+    logw(0, "conn_init():"
            " can't open tty device %s (%s)",
            cfg.ttyport, strerror(errno));
 #endif
@@ -83,7 +83,7 @@
          sock_create_server("", cfg.serverport, TRUE)) < 0)
   {
 #ifdef LOG
-    log(0, "conn_init():"
+    logw(0, "conn_init():"
            " can't create listen() socket (%s)",
            strerror(errno));
 #endif
@@ -111,19 +111,19 @@
   if ((sd = sock_accept(server_sd, &rmt_addr, TRUE)) == RC_ERR)
   { /* error in conn_accept() */
 #ifdef LOG
-    log(0, "conn_open(): error in accept() (%s)", strerror(errno));
+    logw(0, "conn_open(): error in accept() (%s)", strerror(errno));
 #endif
     return;
   }
 #ifdef LOG
-  log(2, "conn_open(): accepting connection from %s",
+  logw(2, "conn_open(): accepting connection from %s",
          inet_ntoa(rmt_addr.sin_addr));
 #endif
   /* compare descriptor of connection with FD_SETSIZE */
   if (sd >= FD_SETSIZE)
   {
 #ifdef LOG
-    log(1, "conn_open(): FD_SETSIZE limit reached,"
+    logw(1, "conn_open(): FD_SETSIZE limit reached,"
            " connection from %s will be dropped",
            inet_ntoa(rmt_addr.sin_addr));
 #endif
@@ -134,7 +134,7 @@
   if (queue.len == cfg.maxconn)
   {
 #ifdef LOG
-    log(1, "conn_open(): number of connections limit reached,"
+    logw(1, "conn_open(): number of connections limit reached,"
            " connection from %s will be dropped",
            inet_ntoa(rmt_addr.sin_addr));
 #endif
@@ -159,7 +159,7 @@
 {
   conn_t *nextconn;
 #ifdef LOG
-  log(2, "conn_close(): closing connection from %s",
+  logw(2, "conn_close(): closing connection from %s",
          inet_ntoa(conn->sockaddr.sin_addr));
 #endif
   /* close socket */
@@ -212,13 +212,40 @@
  *         RC_ERR in case of error.
  */
 ssize_t
-conn_write(int d, void *buf, size_t nbytes)
+conn_write(int d, void *buf, size_t nbytes, int istty)
 {
   int rc;
+  struct timeval ts, tts;
+  long delay;
+#ifdef TRXCTL
+  if (istty) {
+    if (cfg.trxcntl == TRX_RTS)
+      tty_set_rts(d);
+    usleep(35000000l/cfg.ttyspeed);
+  }
+#endif
   do
   { /* trying write to descriptor while breaked by signals */ 
+    gettimeofday(&ts, NULL);
     rc = write(d, buf, nbytes);
   } while (rc == -1 && errno == EINTR);
+  gettimeofday(&ts, NULL);
+
+#ifdef TRXCTL
+  if (istty) {
+    gettimeofday(&tts, NULL);
+    delay = DV(nbytes, cfg.ttyspeed) - 
+      ((tts.tv_sec * 1000000l + tts.tv_usec) - (ts.tv_sec * 1000000l + ts.tv_usec));
+    if (delay > 0) 
+      usleep(delay);
+      logw(7, "usleep finished");
+/*    tcdrain(d); - hangs sometimes, so make calculated delay */
+    if (cfg.trxcntl == TRX_RTS) {
+      tty_clr_rts(d);
+      logw(7, "RTS cleared");
+    }
+  }
+#endif
   return (rc < 0) ? RC_ERR : rc;
 }
 
@@ -250,10 +277,12 @@
 conn_loop(void)
 {
   int rc, max_sd, len, min_timeout;
+  unsigned int i;
   fd_set sdsetrd, sdsetwr;
   struct timeval ts, tts, t_out;
   unsigned long tval, tout_sec, tout = 0ul;
   conn_t *curconn = NULL;
+  char t[256], v[8];
 
   while (TRUE)
   {
@@ -307,20 +336,21 @@
     (void)gettimeofday(&ts, NULL); /* make timestamp */
  
 #ifdef DEBUG
-    log(7, "conn_loop(): select(): max_sd = %d, t_out = %06lu:%06lu ", 
+    logw(7, "conn_loop(): select(): max_sd = %d, t_out = %06lu:%06lu ", 
            max_sd, t_out.tv_sec, t_out.tv_usec);
 #endif
-
     rc = select(max_sd + 1, &sdsetrd, &sdsetwr, NULL, &t_out);
-
+#ifdef DEBUG
+    logw(7, "conn_loop(): select() returns %d ", rc);
+#endif
     if (rc < 0)
     { /* some error caused while select() */
       if (errno == EINTR) continue; /* process signals */
       /* unrecoverable error in select(), exiting */
 #ifdef LOG
-      log(0, "conn_loop(): error in select() (%s)", strerror(errno));
+      logw(0, "conn_loop(): error in select() (%s)", strerror(errno));
 #endif
-      break;
+/*      break; */
     }
 
     /* calculating elapsed time */    
@@ -344,20 +374,22 @@
               state_tty_set(&tty, TTY_READY);
             break;
           case TTY_RESP:
+            ;
+          case TTY_PROC:
             /* checking for received data */
             if (FD_ISSET(tty.fd, &sdsetrd)) break;
             /* response timeout handling */
             if (!tty.ptrbuf)
             {/* there no bytes received */
 #ifdef DEBUG
-              log(5, "tty: response timeout", tty.ptrbuf);
+              logw(5, "tty: response timeout", tty.ptrbuf);
 #endif
               if (!tty.trynum)
                 modbus_ex_write(actconn->buf, MB_EX_TIMEOUT);
               else
               { /* retry request */
 #ifdef DEBUG
-                log(5, "tty: attempt to retry request (%u of %u)",
+                logw(5, "tty: attempt to retry request (%u of %u)",
                        cfg.maxtry - tty.trynum + 1, cfg.maxtry);
 #endif
                 state_tty_set(&tty, TTY_RQST);
@@ -367,30 +399,35 @@
             else 
             { /* some data received */
 #ifdef DEBUG
-            log(5, "tty: response readed (total %d bytes)", tty.ptrbuf);
+            logw(5, "tty: response readed (total %d bytes, offset %d bytes)", tty.ptrbuf, tty.rxoffset);
 #endif
               if (tty.ptrbuf >= MB_MIN_LEN && 
-                     modbus_crc_correct(tty.rxbuf, tty.ptrbuf))
+                     modbus_crc_correct(tty.rxbuf + tty.rxoffset, tty.ptrbuf - tty.rxoffset))
               { /* received response is correct, make OpenMODBUS response */
 #ifdef DEBUG
-                log(5, "tty: response is correct");
+                logw(5, "tty: response is correct");
 #endif
                 (void)memcpy((void *)(actconn->buf + HDRSIZE),
-                             (void *)tty.rxbuf, tty.ptrbuf - CRCSIZE);
-                WORD_WR_BE(actconn->buf + MB_LENGTH_H, tty.ptrbuf - CRCSIZE);
+                             (void *)(tty.rxbuf + tty.rxoffset), tty.ptrbuf - CRCSIZE - tty.rxoffset);
+                WORD_WR_BE(actconn->buf + MB_LENGTH_H, tty.ptrbuf - CRCSIZE - tty.rxoffset);
               }
               else
               {
                 /* received response is incomplete or CRC failed */
 #ifdef DEBUG
-                log(5, "tty: response is incorrect");
+                t[0] = '\0';
+                for (i = 0; i < tty.ptrbuf; i++) {
+                  sprintf(v,"[%2.2x]", tty.rxbuf[i]);
+                  strncat(t, v, 256);
+                }
+                logw(5, "tty: response is incorrect (%s)", t);
 #endif
                 if (!tty.trynum)
                   modbus_ex_write(actconn->buf, MB_EX_CRC);
                 else
                 { /* retry request */
 #ifdef DEBUG
-                  log(5, "tty: attempt to retry request (%u of %u)",
+                  logw(5, "tty: attempt to retry request (%u of %u)",
                          cfg.maxtry - tty.trynum + 1, cfg.maxtry);
 #endif
                   state_tty_set(&tty, TTY_RQST);
@@ -403,10 +440,16 @@
             /* make inter-request pause */
             state_tty_set(&tty, TTY_PAUSE);
             break;
+          case TTY_RQST:
+#ifdef DEBUG
+            logw(5, "tty: TTY_RQST timeout");
+#endif
+	    break;
         }
-      else tty.timer -= tval;
+      else
+        tty.timer -= tval;
     }
-    
+
     if (cfg.conntimeout)
     { /* expire staled connections */
       tout += tval;
@@ -423,14 +466,15 @@
             if (curconn->state == CONN_TTY)
             { /* deadlock in CONN_TTY state, exiting */
 #ifdef LOG
-              log(0, "conn[%s]: state CONN_TTY deadlock, exiting!",
+              logw(0, "conn[%s]: state CONN_TTY deadlock, exiting!",
                      inet_ntoa(curconn->sockaddr.sin_addr));
 #endif
-              exit (-1);
+              tcflush(tty.fd, TCIOFLUSH);
+/*              exit (-1);*/
             }
             /* purge connection */
 #ifdef LOG
-            log(2, "conn[%s]: timeout, closing connection",
+            logw(2, "conn[%s]: timeout, closing connection",
                    inet_ntoa(curconn->sockaddr.sin_addr));
 #endif
             curconn = conn_close(curconn);
@@ -442,9 +486,6 @@
       }
     }
     
-    if (rc == 0)
-      continue;	/* timeout caused, we will do select() again */
-
     /* checking for pending connections */
     if (FD_ISSET(server_sd, &sdsetrd)) conn_open();
 
@@ -452,72 +493,174 @@
     if (tty.state == TTY_RQST)
       if (FD_ISSET(tty.fd, &sdsetwr))
       {
+        tcflush(tty.fd, TCIFLUSH);
         rc = conn_write(tty.fd, tty.txbuf + tty.ptrbuf,
-                        tty.txlen - tty.ptrbuf);
+                        tty.txlen - tty.ptrbuf, 1);
         if (rc <= 0)
         { /* error - we can't continue... */
 #ifdef LOG
-          log(0, "tty: error in write() (%s)", strerror(errno));
+          logw(0, "tty: error in write() (%s)", strerror(errno));
 #endif
-          break; /* exiting... */
+/*          break; / * exiting... */
+          state_tty_set(&tty, TTY_PAUSE);
         }
 #ifdef DEBUG
-        log(7, "tty: written %d bytes", rc);
+        logw(7, "tty: written %d bytes", rc);
 #endif
         tty.ptrbuf += rc;
         if (tty.ptrbuf == tty.txlen)
         { /* request transmitting completed, switch to TTY_RESP */
 #ifdef DEBUG
-          log(7, "tty: request written (total %d bytes)", tty.txlen);
+          logw(7, "tty: request written (total %d bytes)", tty.txlen);
 #endif
           state_tty_set(&tty, TTY_RESP);
+          switch (tty.txbuf[1]) {
+            case 1:
+              ;
+            case 2:
+              tty.rxlen = 5 + (tty.txbuf[4] * 256 + tty.txbuf[5] + 7)/8;
+              break;
+            case 3:
+              ;
+            case 4:
+              tty.rxlen = 5 + tty.txbuf[5] * 2;
+              break;
+            case 7:
+              tty.rxlen = 5;
+              break;
+            case 11:
+              ;
+            case 15:
+              ;
+            case 16:
+              tty.rxlen = 8;
+              break;
+            default:
+              tty.rxlen = tty.txlen;
+          }
+          if (tty.rxlen > TTY_BUFSIZE)
+            tty.rxlen = TTY_BUFSIZE;
+          tty.timer += DV(tty.rxlen, tty.speed);
+#ifdef DEBUG
+          logw(5, "tty: estimated %d bytes, waiting %lu usec", tty.rxlen, tty.timer);
+#endif
         }
       }
-    
+
     if (FD_ISSET(tty.fd, &sdsetrd))
     {
       if (tty.state == TTY_RESP)
       {
         rc = conn_read(tty.fd, tty.rxbuf + tty.ptrbuf,
-                       tty.rxlen - tty.ptrbuf);
-        if (rc <= 0)
+                       tty.rxlen - tty.ptrbuf + tty.rxoffset);
+        if (rc < 0)
         { /* error - we can't continue... */
 #ifdef LOG
-          log(0, "tty: error in read() (%s)", strerror(errno));
+          logw(0, "tty: error in read() (%s)", strerror(errno));
 #endif
-          break; /* exiting... */
+/*          break; / * exiting... */
         }
 #ifdef DEBUG
-          log(7, "tty: readed %d bytes", rc);
+          logw(7, "tty: readed %d bytes", rc);
 #endif
-        tty.ptrbuf += rc;
-        if (tty.ptrbuf == tty.rxlen)
-        { /* XXX still generating error response */
-          modbus_ex_write(actconn->buf, MB_EX_CRC);
-          /* switch connection to response state */
-          state_conn_set(actconn, CONN_RESP);
-          /* make inter-request pause */
-          state_tty_set(&tty, TTY_PAUSE);
+        if (tty.ptrbuf - tty.rxoffset < 3 && tty.ptrbuf - tty.rxoffset + rc >= 3) {
+          /* we received more than 3 bytes from header - address, request id and bytes count */
+          if (!tty.rxoffset) {
+            /* offset is unknown */
+            for (i = 0; i < tty.ptrbuf - tty.rxoffset + rc - 1; i++) {
+              if (tty.rxbuf[i] == tty.txbuf[0] && tty.rxbuf[i+1] == tty.txbuf[1]) {
+#ifdef DEBUG
+                logw(5, "tty: rx offset is %d", i);
+#endif
+                tty.rxoffset = i;
+                break;
+              }
+            }
+            switch (tty.txbuf[1]) {
+              case 1:
+                ;
+              case 2:
+                ;
+              case 3:
+                ;
+              case 4:
+                i = 5 + tty.rxbuf[tty.rxoffset + 2];
+            }
+            if (i + tty.rxoffset > TTY_BUFSIZE)
+              i = TTY_BUFSIZE - tty.rxoffset;
+            if (i != tty.rxlen) {
+#ifdef DEBUG
+              logw(5, "tty: rx len changed from %d to %d", tty.rxlen, i);
+#endif
+              tty.rxlen = i;
+            }
+          }
         }
-        else
-          /* reset timer */
-          tty.timer = cfg.respwait * 1000l;
+        tty.ptrbuf += rc;
+        logw(5, "tty: readed %d bytes of %d, offset %d", tty.ptrbuf, tty.rxlen + tty.rxoffset, tty.rxoffset);
+        if (tty.ptrbuf == tty.rxlen + tty.rxoffset)
+          state_tty_set(&tty, TTY_PROC);
       }
-      else
+      else if (tty.state != TTY_PROC)
       { /* drop unexpected tty data */
         if ((rc = conn_read(tty.fd, tty.rxbuf, BUFSIZE)) <= 0)
         { /* error - we can't continue... */
 #ifdef LOG
-          log(0, "tty: error in read() (%s)", strerror(errno));
+          logw(0, "tty: error in read() (%s)", strerror(errno));
 #endif
-          break; /* exiting... */
+/*          break; / * exiting... */
         }
 #ifdef DEBUG
-          log(7, "tty: dropped %d bytes", rc);
+          logw(7, "tty: dropped %d bytes", rc);
 #endif
       }
     }
-    
+    if (tty.state == TTY_PROC) {
+#ifdef DEBUG
+      logw(5, "tty: response readed (total %d bytes, offset %d bytes)", tty.ptrbuf, tty.rxoffset);
+#endif
+      if (tty.ptrbuf >= MB_MIN_LEN && 
+         modbus_crc_correct(tty.rxbuf + tty.rxoffset, tty.ptrbuf - tty.rxoffset))
+      { /* received response is correct, make OpenMODBUS response */
+#ifdef DEBUG
+        logw(5, "tty: response is correct");
+#endif
+        (void)memcpy((void *)(actconn->buf + HDRSIZE),
+                     (void *)(tty.rxbuf + tty.rxoffset), tty.ptrbuf - CRCSIZE - tty.rxoffset);
+        WORD_WR_BE(actconn->buf + MB_LENGTH_H, tty.ptrbuf - CRCSIZE - tty.rxoffset);
+        /* switch connection to response state */
+        state_conn_set(actconn, CONN_RESP);
+        /* make inter-request pause */
+        state_tty_set(&tty, TTY_PAUSE);
+      } else {
+        /* received response is incomplete or CRC failed */
+#ifdef DEBUG
+        t[0] = '\0';
+        for (i = 0; i < tty.ptrbuf; i++) {
+          sprintf(v,"[%2.2x]", tty.rxbuf[i]);
+          strncat(t, v, 256);
+        }
+        logw(5, "tty: response is incorrect (%s)", t);
+#endif
+        if (!tty.trynum) {
+          modbus_ex_write(actconn->buf, MB_EX_CRC);
+          /* switch connection to response state */
+          state_conn_set(actconn, CONN_RESP);
+          /* make inter-request pause */
+          state_tty_set(&tty, TTY_PAUSE);
+        } else { /* retry request */
+#ifdef DEBUG
+          logw(5, "tty: attempt to retry request (%u of %u)",
+                 cfg.maxtry - tty.trynum + 1, cfg.maxtry);
+#endif
+          state_tty_set(&tty, TTY_RQST);
+        }
+      }
+    }
+
+    if (rc == 0)
+      continue;	/* timeout caused, we will do select() again */
+
     /* processing data on the sockets */
     len = queue.len;
     curconn = queue.beg;
@@ -565,7 +708,7 @@
             rc = conn_write(curconn->sd,
                             curconn->buf + curconn->ctr,
                             MB_HDR(curconn->buf, MB_LENGTH_L) + 
-                            HDRSIZE - curconn->ctr);
+                            HDRSIZE - curconn->ctr, 0);
             if (rc <= 0)
             { /* error - drop this connection and go to next queue element */
               curconn = conn_close(curconn);
diff -aur mbus-0.1.2.orig/src/log.c mbus-0.1.3/src/log.c
--- mbus-0.1.2.orig/src/log.c	2003-10-26 21:26:08.000000000 +0200
+++ mbus-0.1.3/src/log.c	2011-08-12 22:35:51.000000000 +0300
@@ -54,6 +54,7 @@
     {
       /* logfile isn't needed */
       *logfullname = '\0';
+      openlog("mbusd", LOG_ODELAY | LOG_PID, LOG_DAEMON);
       return RC_OK;
     }
     /* append default log path */
@@ -88,7 +89,7 @@
 
 /* Put message with format FMT with errorlevel LEVEL to log file */
 void 
-log(int level, char *fmt, ...)
+logw(int level, char *fmt, ...)
 {
 #ifdef HRDATE
   time_t tt;
@@ -115,7 +116,9 @@
   va_end(args);
   strcpy(str + strsize++, "\n");
   if (!isdaemon) printf("%s", str);
-  if (*logfullname == '\0') return;
-  log_app(logfullname, str);
+  if (*logfullname == '\0')
+    syslog(level + LOG_ERR < LOG_DEBUG ? level + LOG_ERR : LOG_ERR, "%s", str);
+  else
+    log_app(logfullname, str);
 }
 #endif
diff -aur mbus-0.1.2.orig/src/log.h mbus-0.1.3/src/log.h
--- mbus-0.1.2.orig/src/log.h	2003-10-02 23:03:55.000000000 +0300
+++ mbus-0.1.3/src/log.h	2011-08-09 20:14:31.000000000 +0300
@@ -35,6 +35,7 @@
 #define _LOG_H
 
 #include "globals.h"
+#include <syslog.h>
 
 extern int isdaemon;
 
@@ -45,7 +46,7 @@
 #ifdef LOG
 int log_init(char *logname);
 int log_app(char *logname, char *string);
-void log(int level, char *fmt, ...);
+void logw(int level, char *fmt, ...);
 #endif
 
 #endif /* _LOG_H */
diff -aur mbus-0.1.2.orig/src/main.c mbus-0.1.3/src/main.c
--- mbus-0.1.2.orig/src/main.c	2003-10-26 21:22:18.000000000 +0200
+++ mbus-0.1.3/src/main.c	2011-08-12 22:31:26.000000000 +0300
@@ -99,7 +99,8 @@
 void
 usage(char *exename)
 {
-  printf("%s-%s Copyright (C) 2002, 2003 Victor Antonovich <avmlink@vlink.ru>\n\n"
+  printf("%s-%s Copyright (C) 2002, 2003 Victor Antonovich <avmlink@vlink.ru>\n"
+	 "Copyright (C) 2011 Andrew Denysenko <nitr0@seti.kr.ua>\n\n" 
 	 "Usage: %s [-h] [-d] [-v level] [-L name] [-p name] [-s value] [-P number]\n"
    "             [-C number] [-N number] [-R value] [-W value] [-T value]\n\n"
 	 "  -h             this help\n"
@@ -198,12 +199,12 @@
         {
           if (*optarg == '-')
           {
-            if (isdaemon)
+/*            if (isdaemon)
             {
                printf("%s: -L: '-' value is valid only if "
                       "-d switch was given\n", exename);
                exit(-1);
-            }
+            }*/
             /* logfile isn't needed, doing all output to STDOUT */
             *cfg.logname = '\0';
           }
@@ -292,14 +293,14 @@
            strerror(errno));
     exit(-1);
   }
-  log(2, "%s-%s started...", PACKAGE, VERSION);
+  logw(2, "%s-%s started...", PACKAGE, VERSION);
 #endif
 
   if (conn_init())
   {
 #ifdef LOG
     err = errno;
-    log(2, "conn_init() failed, exiting...");
+    logw(2, "conn_init() failed, exiting...");
 #endif
     exit(err);
   }
@@ -308,7 +309,7 @@
   if (isdaemon && (rc = daemon(TRUE, FALSE)))
   {
 #ifdef LOG
-    log(0, "Can't be daemonized (%s), exiting...", strerror(errno));
+    logw(0, "Can't be daemonized (%s), exiting...", strerror(errno));
 #endif
     exit(rc);
   }
@@ -316,7 +317,7 @@
   conn_loop();
   err = errno;
 #ifdef LOG
-  log(2, "%s-%s exited...", PACKAGE, VERSION);
+  logw(2, "%s-%s exited...", PACKAGE, VERSION);
 #endif
   return (err);
 }
diff -aur mbus-0.1.2.orig/src/modbus.h mbus-0.1.3/src/modbus.h
--- mbus-0.1.2.orig/src/modbus.h	2003-09-13 23:38:45.000000000 +0300
+++ mbus-0.1.3/src/modbus.h	2011-08-09 20:14:31.000000000 +0300
@@ -83,8 +83,8 @@
 /*
  * Exception codes
  */
-#define MB_EX_CRC     128
-#define MB_EX_TIMEOUT 129
+#define MB_EX_CRC     4
+#define MB_EX_TIMEOUT 0x0B
 
 /* Prototypes */
 int modbus_crc_correct(unsigned char *frame, unsigned int len);
diff -aur mbus-0.1.2.orig/src/queue.c mbus-0.1.3/src/queue.c
--- mbus-0.1.2.orig/src/queue.c	2003-09-13 23:38:39.000000000 +0300
+++ mbus-0.1.3/src/queue.c	2011-08-09 20:14:31.000000000 +0300
@@ -54,7 +54,7 @@
   if (!newconn)
   { /* Aborting program execution */
 #ifdef LOG
-    log(0, "queue_new_elem(): out of memory for new element (%s)",
+    logw(0, "queue_new_elem(): out of memory for new element (%s)",
            strerror(errno));
 #endif
     exit(errno);
@@ -67,7 +67,7 @@
   queue->end = newconn;
   queue->len++;
 #ifdef DEBUG
-  log(5, "queue_new_elem(): length now is %d", queue->len);
+  logw(5, "queue_new_elem(): length now is %d", queue->len);
 #endif
   return newconn;
 }
@@ -81,7 +81,7 @@
   if (queue->len <= 0)
   { /* queue is empty */
 #ifdef LOG
-    log(1, "queue_delete_elem(): queue empty!");
+    logw(1, "queue_delete_elem(): queue empty!");
 #endif
     return;
   }
@@ -102,7 +102,7 @@
   queue->len--;
   free((void *)conn);
 #ifdef DEBUG  
-  log(5, "queue_delete_elem(): length now is %d", queue->len);
+  logw(5, "queue_delete_elem(): length now is %d", queue->len);
 #endif
   return;
 }
diff -aur mbus-0.1.2.orig/src/sig.c mbus-0.1.3/src/sig.c
--- mbus-0.1.2.orig/src/sig.c	2003-09-13 23:38:33.000000000 +0300
+++ mbus-0.1.3/src/sig.c	2011-08-09 20:14:31.000000000 +0300
@@ -146,7 +146,7 @@
   static char *signames[] = { 
     "", "HUP", "INT", "QUIT", "ILL", "TRAP", "IOT", "BUS", "FPE",
     "KILL", "USR1", "SEGV", "USR2", "PIPE", "ALRM", "TERM" };
-  log(2, "Terminated by signal: SIG%s", signames[sig_flag]);
+  logw(2, "Terminated by signal: SIG%s", signames[sig_flag]);
 #endif
   /* currently simply exit the program */
   exit(1);
diff -aur mbus-0.1.2.orig/src/sock.c mbus-0.1.3/src/sock.c
--- mbus-0.1.2.orig/src/sock.c	2003-09-13 23:38:45.000000000 +0300
+++ mbus-0.1.3/src/sock.c	2011-08-09 20:14:31.000000000 +0300
@@ -66,7 +66,7 @@
          socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create(): unable to create socket (%s)",
+    logw(0, "sock_create(): unable to create socket (%s)",
         strerror(errno));
 #endif
     return RC_ERR;
@@ -76,7 +76,7 @@
   if (sock_set_blkmode(sock, blkmode) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create(): unable to set "
+    logw(0, "sock_create(): unable to set "
            "server socket to nonblocking (%s)",
            strerror(errno));
 #endif
@@ -109,7 +109,7 @@
   if (fcntl(server_s, F_SETFD, 1) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create_server():"
+    logw(0, "sock_create_server():"
            " can't set close-on-exec on socket (%s)",
            strerror(errno));
 #endif
@@ -121,7 +121,7 @@
 		          sizeof(sock_opt)) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create_server():"
+    logw(0, "sock_create_server():"
            " can't set socket to SO_REUSEADDR (%s)",
            strerror(errno));
 #endif
@@ -137,7 +137,7 @@
 		          sizeof(sock_opt)) == -1))
   {
 #ifdef LOG
-    log(0, "sock_create_server():"
+    logw(0, "sock_create_server():"
            " can't set socket TRX buffers sizes (%s)",
            strerror(errno));
 #endif
@@ -158,7 +158,7 @@
 	   sizeof(server_sockaddr)) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create_server():"
+    logw(0, "sock_create_server():"
            " unable to bind() socket (%s)",
            strerror(errno));
 #endif
@@ -169,7 +169,7 @@
   if (listen(server_s, BACKLOG) == -1)
   {
 #ifdef LOG
-    log(0, "sock_create_server():"
+    logw(0, "sock_create_server():"
            " unable to listen() on socket (%s)",
            strerror(errno));
 #endif
@@ -199,7 +199,7 @@
     if (errno != EAGAIN && errno != EWOULDBLOCK)
       /* some errors caused */
 #ifdef LOG
-      log(0, "sock_accept(): error in accept() (%s)", strerror(errno));
+      logw(0, "sock_accept(): error in accept() (%s)", strerror(errno));
 #endif
     return RC_ERR;
   }
@@ -207,7 +207,7 @@
   if (sock_set_blkmode(sd, blkmode) == RC_ERR)
   {
 #ifdef LOG
-    log(0, "sock_accept(): can't set socket blocking mode (%s)", 
+    logw(0, "sock_accept(): can't set socket blocking mode (%s)", 
            strerror(errno));
 #endif
     close(sd);
@@ -222,7 +222,7 @@
 		          sizeof(sock_opt)) == -1))
   {
 #ifdef LOG
-    log(0, "sock_accept():"
+    logw(0, "sock_accept():"
            " can't set socket TRX buffer sizes (%s)",
            strerror(errno));
 #endif
diff -aur mbus-0.1.2.orig/src/state.c mbus-0.1.3/src/state.c
--- mbus-0.1.2.orig/src/state.c	2003-09-13 23:38:33.000000000 +0300
+++ mbus-0.1.3/src/state.c	2011-08-09 20:14:31.000000000 +0300
@@ -75,31 +75,31 @@
     case CONN_HEADER:
       conn->ctr = 0;
 #ifdef DEBUG
-      log(5, "conn[%s]: state now is CONN_HEADER",
+      logw(5, "conn[%s]: state now is CONN_HEADER",
              inet_ntoa(conn->sockaddr.sin_addr));
 #endif
       break;
 #ifdef DEBUG
     case CONN_RQST:
-      log(5, "conn[%s]: state now is CONN_RQST",
+      logw(5, "conn[%s]: state now is CONN_RQST",
              inet_ntoa(conn->sockaddr.sin_addr));
     break;
     case CONN_TTY:
-      log(5, "conn[%s]: state now is CONN_TTY",
+      logw(5, "conn[%s]: state now is CONN_TTY",
              inet_ntoa(conn->sockaddr.sin_addr));
       break;
 #endif
     case CONN_RESP:
       conn->ctr = 0;
 #ifdef DEBUG
-      log(5, "conn[%s]: state now is CONN_RESP",
+      logw(5, "conn[%s]: state now is CONN_RESP",
              inet_ntoa(conn->sockaddr.sin_addr));
 #endif
       break;
     default:
       /* unknown state, exiting */
 #ifdef DEBUG
-      log(5, "conn_set_state([%s]) - invalid state (%d)",
+      logw(5, "conn_set_state([%s]) - invalid state (%d)",
              inet_ntoa(conn->sockaddr.sin_addr), state);
 #endif
       exit (-1);
@@ -121,14 +121,14 @@
       mod->trynum = 0;
       mod->timer = (unsigned long)cfg.rqstpause * 1000l;
 #ifdef DEBUG
-      log(5, "tty: state now is TTY_PAUSE");
+      logw(5, "tty: state now is TTY_PAUSE");
 #endif
       break;
     case TTY_READY:
       mod->trynum = 0;
       mod->timer = 0l;
 #ifdef DEBUG
-      log(5, "tty: state now is TTY_READY");
+      logw(5, "tty: state now is TTY_READY");
 #endif
       break;
     case TTY_RQST:
@@ -136,7 +136,7 @@
       mod->timer = 0l;
       mod->trynum = mod->trynum ? --mod->trynum : (unsigned)cfg.maxtry;
 #ifdef DEBUG
-      log(5, "tty: state now is TTY_RQST");
+      logw(5, "tty: state now is TTY_RQST");
 #endif
 #ifndef NOSILENT
       tty_delay(DV(2, cfg.ttyspeed));
@@ -144,17 +144,23 @@
       break;
     case TTY_RESP:
       mod->ptrbuf = 0;
+      mod->rxoffset = 0;
       /* XXX need real recv length? */
       mod->rxlen = TTY_BUFSIZE;
       mod->timer = cfg.respwait * 1000l + DV(mod->txlen, mod->speed);
 #ifdef DEBUG
-      log(5, "tty: state now is TTY_RESP");
+      logw(5, "tty: state now is TTY_RESP");
+#endif
+      break;
+    case TTY_PROC:
+#ifdef DEBUG
+      logw(5, "tty: state now is TTY_PROC");
 #endif
       break;
     default:
       /* unknown state, exiting */
 #ifdef DEBUG
-      log(5, "tty_set_state() - invalid state (%d)", state);
+      logw(5, "tty_set_state() - invalid state (%d)", state);
 #endif
       exit (-1);
   }
diff -aur mbus-0.1.2.orig/src/tty.c mbus-0.1.3/src/tty.c
--- mbus-0.1.2.orig/src/tty.c	2003-09-27 16:22:52.000000000 +0300
+++ mbus-0.1.3/src/tty.c	2011-08-14 16:27:34.000000000 +0300
@@ -103,14 +103,14 @@
   {
     buferr = errno;
 #ifdef LOG
-    log(0, "uu_lock(): can't lock tty device %s (%s)",
+    logw(0, "uu_lock(): can't lock tty device %s (%s)",
         ttyname, uu_lockerr(uuerr));
 #endif  
     errno = buferr;
     return RC_ERR;
   }
 #endif
-  mod->fd = open(mod->port, O_RDWR | O_NONBLOCK);
+  mod->fd = open(mod->port, O_RDWR | O_NONBLOCK | O_NOCTTY);
   if (mod->fd < 0)
     return RC_ERR;          /* attempt failed */
   return tty_set_attr(mod);
@@ -123,31 +123,26 @@
 tty_set_attr(ttydata_t *mod)
 {
   int flag;
+  speed_t tspeed = tty_transpeed(mod->speed);
 
   if (tcgetattr(mod->fd, &mod->savedtios))
     return RC_ERR;
   memcpy(&mod->tios, &mod->savedtios, sizeof(mod->tios));
-  mod->tios.c_cflag &= ~(CSTOPB | PARENB | PARODD | CRTSCTS);
+  mod->tios.c_cflag &= ~(CSTOPB | PARENB | PARODD | CRTSCTS | CSIZE);
   mod->tios.c_cflag |= CS8 | CREAD | CLOCAL;
   mod->tios.c_iflag = FALSE;
   mod->tios.c_oflag = FALSE;
   mod->tios.c_lflag = FALSE;
   mod->tios.c_cc[VTIME] = 0;
-  mod->tios.c_cc[VMIN] = 1;
+  mod->tios.c_cc[VMIN] = 0;
 #ifdef HAVE_CFSETSPEED
-  cfsetspeed(&mod->tios, tty_transpeed(mod->speed));
+  cfsetspeed(&mod->tios, tspeed);
 #else
-  cfsetispeed(&mod->tios, tty_transpeed(mod->speed));
-  cfsetospeed(&mod->tios, tty_transpeed(mod->speed));
+  cfsetispeed(&mod->tios, tspeed);
+  cfsetospeed(&mod->tios, tspeed);
 #endif
   if (tcsetattr(mod->fd, TCSANOW, &mod->tios))
     return RC_ERR;
-#if defined(TIOCSETA)
-  ioctl(mod->fd, TIOCSETA, &mod->tios);
-#else
-  /* if TIOCSETA is not defined, try to fallback to TCSETA */
-  ioctl(mod->fd, TCSETA, &mod->tios);
-#endif
   tcflush(mod->fd, TCIOFLUSH);
 #ifdef  TRXCTL
   tty_clr_rts(mod->fd);
@@ -320,7 +315,7 @@
   {
     buferr = errno;
 #ifdef LOG
-    log(0, "uu_lock(): can't unlock tty device %s",
+    logw(0, "uu_lock(): can't unlock tty device %s",
         ttyname);
 #endif
     errno = buferr;
diff -aur mbus-0.1.2.orig/src/tty.h mbus-0.1.3/src/tty.h
--- mbus-0.1.2.orig/src/tty.h	2003-09-27 16:22:52.000000000 +0300
+++ mbus-0.1.3/src/tty.h	2011-08-09 20:14:31.000000000 +0300
@@ -64,9 +64,9 @@
 /* 
  * TRX control types
  */
-#ifdef  TRX_CTL
-#  define TRX_ADDC 0
-#  define TRX_RTS  !TRX_ADDC
+#ifdef  TRXCTL
+#define TRX_ADDC 0
+#define TRX_RTS  1
 #endif
 
 /*
@@ -76,6 +76,7 @@
 #define TTY_READY 1
 #define TTY_RQST  2
 #define TTY_RESP  3
+#define TTY_PROC  4
  
 /*
  * TTY related data storage structure
@@ -96,6 +97,7 @@
   unsigned int txlen;           /* tx data length */
   unsigned int rxlen;           /* rx data length */
   unsigned char ptrbuf;         /* ptr in the buffer */
+  unsigned char rxoffset;       /* ptr in the buffer */
   unsigned char txbuf[TTY_BUFSIZE]; /* transmitting buffer */
   unsigned char rxbuf[TTY_BUFSIZE]; /* receiving buffer */
 } ttydata_t;
