#!/usr/bin/haserl
# $Id: dnsmasq.cgi,v 1.7 2008/04/04 09:32:24 mats Exp mats $
<? title="DNS and DHCP Services"  /var/webconf/lib/preamble.sh  ?>

<h1>DNS/DHCP settings</h1>
<p>Choose your DNS (Domain Name Server) settings and setup your local
DHCP daemon.
Then restart the DNS and DHCP daemon after having saved the configuration.
</p>

<? # Functions and intelligence
get_settings () {

	# Erase values. These are later assigned values a variable number of times!
	echo -e "$Rf='' $Ld='' $IF='' $Dr='' $Dh=''\n" > /tmp/$SESSIONID.vars

	sed -r -n -e "s/^ *($RF) *= *(.*)/$Rf\=\"\$$Rf\\\\n\2\"/p" \
			-e "s/^ *($LD) *= *\/(.*)\//$Ld\=\"\$$Ld\\\\n\2\"/p" \
			-e '/^[[:space:]]*domain=.*/ {y/-/_/; p}' \
			-e "s/^ *($IF) *=(.*)$/$IF=\"\$$IF \2\"/p" \
			-e "s/^ *($DR) *= *(.*)/$Dr\=\"\$$Dr\\\\n\2\"/p" \
			-e "s/^ *($DH) *= *(.*)/$Dh\=\"\$$Dh\\\\n\2\"/p" \
		< $DNSMASQ_CONFFILE >> /tmp/$SESSIONID.vars

	# Clean the beginning of the values
	echo  "$Rf=\${$Rf#\\\\n} $IF=\${$IF# } $Ld=\${$Ld#\\\\n}" \
		>> /tmp/$SESSIONID.vars
	echo "$Dr=\${$Dr#\\\\n} $Dh=\${$Dh#\\\\n}" >> /tmp/$SESSIONID.vars

	. /tmp/$SESSIONID.vars
	}

# Add a portion to the unified sed script
add_block_to_sed () {
	if [ -s /tmp/$SESSIONID.include ]; then
		echo -n "/$2/,/$3/ {" >> /tmp/$SESSIONID.sed
		[ "$FORM_delhash" == "yes" ] \
			&& echo -n "/^#$1/d; " >> /tmp/$SESSIONID.sed
		echo -n "s/^$1.*/#&/; /$3/ i" >> /tmp/$SESSIONID.sed

		cat /tmp/$SESSIONID.include |
		while read row; do
			echo -n -e "\\\\\n$1$row" >> /tmp/$SESSIONID.sed
		done
		echo -e '\n}' >> /tmp/$SESSIONID.sed
	else
		echo "/$2/,/$3/ s/^$1.*/#&/" >> /tmp/$SESSIONID.sed
	fi
	}
	
save_settings () {
	echo "2 {s/ Regen.*//; s/^#$/# Regenerated by dnsmasq.cgi $(date)/}" \
		> /tmp/$SESSIONID.sed

	FORM_RESOLV=$(echo -n "$FORM_RESOLV" | dostounix | sed '/^$/d')
	if [ -z "$FORM_RESOLV" ]; then 
		echo "s|^ *$RF|#$RF|" \
			>> /tmp/$SESSIONID.sed
	else
		echo -e "$FORM_RESOLV" > /tmp/$SESSIONID.include
		add_block_to_sed "$RF=" '^# somew' '^$|^# By'
	fi

	FORM_LOCDOM=$(echo -n "$FORM_LOCDOM" | dostounix | sed '/^$/d')
	if [ -z "$FORM_LOCDOM" ]; then 
		echo "s|^ *local=|#local=|" \
			>> /tmp/$SESSIONID.sed
	else
		echo -e "$FORM_LOCDOM" | sed -r 's-.+-/&/-' \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$LD=" '^# from' '^$|^# Add dom'
	fi

	if [ -z "$FORM_INTERFACES" ]; then
		echo "/^# Repeat/,/Or you|^$/ {s/^ *#? *($IF=.*)/#\1/}" \
			>> /tmp/$SESSIONID.sed
	else
		echo "$FORM_INTERFACES" | tr ' ' '\n' | not_an_interface "<br />"
		echo -n '/^# Repeat/,/Or you|^$/ {' >> /tmp/$SESSIONID.sed
		[ "$FORM_delhash" == "yes" ] \
			&& echo -n "/^#$IF/d; " >> /tmp/$SESSIONID.sed
		echo -n "s/^ *$IF/#$IF/; /Or you|^$/ i" >> /tmp/$SESSIONID.sed

		for name in $FORM_INTERFACES; do
			echo -n -e "\\\\\n$IF=$name" >> /tmp/$SESSIONID.sed
		done
		echo -e '\n}' >>/tmp/$SESSIONID.sed
	fi

	if echo "$FORM_DOMAIN" | egrep -q '^[[:space:]]*$'; then
		echo "s,^ *domain=,#domain=," >> /tmp/$SESSIONID.sed
	else
		echo "$FORM_DOMAIN" | not_host_or_qname "<br />"
		echo "50,150 s,^ *#? *domain=.*$,domain=$FORM_DOMAIN," \
			>> /tmp/$SESSIONID.sed
	fi

	FORM_DHCPRANGE=$(echo -n "$FORM_DHCPRANGE" | dostounix | sed '/^$/d')
	if [ -z "$FORM_DHCPRANGE" ]; then
		echo '/^# service\./,/^# Supply/ s/^ *(dhcp-range=.*)/#\1/' \
			>> /tmp/$SESSIONID.sed
	else
		echo "$FORM_DHCPRANGE" | not_dhcp_range "<br />"
		echo -n "$FORM_DHCPRANGE" | egrep "^$Plain_dhcp_range$" \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$DR=" '^# service\.$' '^$|ex.*DH'
		
		echo -n "$FORM_DHCPRANGE" | egrep "^$Netmasked_dhcp_range$" \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$DR=" '^# don.*worry' '^$|ex.*DH' 

		echo -n "$FORM_DHCPRANGE" | egrep "^$Netid_dhcp_range$" \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$DR=" '^# some.*network' '^$|Sup.*DH'
	fi

	FORM_DHCPHOST=$(echo -n "$FORM_DHCPHOST" | dostounix | sed '/^$/d')
	if [ -z "$FORM_DHCPHOST" ]; then
		echo "/^ *$DH=$Simple_dhcp_host$/ s/^ *$DH/#$DH/" \
			>> /tmp/$SESSIONID.sed
	else
		echo "$FORM_DHCPHOST" | not_hwaddr_dhcp_host "<br />"
		echo -n "$FORM_DHCPHOST" | egrep "^$Basic_hwaddr_ipaddr$" \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$DH=" '^# The IP.*0\.60$' '^$|hardware'
		
		echo -n "$FORM_DHCPHOST" | egrep "^$Mixed_hwaddr_text$" | \
			grep -v ignore > /tmp/$SESSIONID.include
		add_block_to_sed "$DH=" '^# 11.*fred\"$' '^$|ether'

		echo -n "$FORM_DHCPHOST" | egrep "^$Mixed_hwaddr_ipaddr_text$" | \
			grep -v ignore > /tmp/$SESSIONID.include
		add_block_to_sed "$DH=" '^# the name.*minutes$' '^$|machine'

		echo -e "$FORM_DHCPHOST" | egrep "^$Simple_dhcp_host,ignore$" \
			> /tmp/$SESSIONID.include
		add_block_to_sed "$DH=" 'Never offer' '^$|Ignore'
	fi

	# Finally, effectuate the changes in a single sed task!
	sed -rf /tmp/$SESSIONID.sed -i $DNSMASQ_CONFFILE
	}

# Abreviations used in sed scripting
IF="interface"
RF="resolv-file" Rf="resolv_file"
LD="local" Ld="locdom"
DR="dhcp-range" Dr="dhcp_range"
DH="dhcp-host" Dh="dhcp_host"

DNSMASQ_CONFFILE=/etc/dnsmasq.conf

. /var/webconf/lib/validator.sh
get_settings

if [ "$FORM_cmd" = "Save" ]; then
	. /var/webconf/lib/validator.sh
	save_settings
	report_validation_ok
	get_settings
fi
?>

<h1>Configuration</h1>
<? if [ "$FORM_cmd" = "List" ]; then
	cat <<-EOF
	<!-- 
	#BEGIN WEBCONF SETTINGS LIST 
	$( cat /tmp/$SESSIONID.vars )
	#END WEBCONF SETTINGS LIST 
	-->
	EOF
  fi
?>

<h2> DNS and DHCP settings</h2>
<p>Configure the Domain Name Resolution (DNS) and enable DHCP for dynamic
host configuration.</p>

<form action="<? echo -n $SCRIPT_NAME ?>" method=post
		enctype="multipart/form-data">

<table> <!-- DNS and DHCP -->
<tr bgcolor="#<? echo -n $CL0 ?>">
<td class="fhead">Resolv-files</td>
<td class="ftail">
	<p>Use this item if you rely on your Internet Service Provider's
	<i>Domain Name Service</i>. With multiple files, the most recent file is
	preferred when determining the name server to ask, but two or more
	file are rarely used. Common choices are:
	<ul>
	<li>ADSL users: <i>/etc/ppp/resolv.conf</i></li>
	<li>Cable users: <i>/etc/dhcpc/resolv.conf</i></li>
	<li>An empty field defaults to <i>/etc/resolv.conf</i></li>
	</ul>
	</p>
<? . /tmp/$SESSIONID.vars; count=$(echo -e $resolv_file | wc -l) ?>
	<textarea cols="40" rows="<? echo -n $count ?>" name="RESOLV"
		><? [ -z "$FORM_RESOLV" ] && \
			FORM_RESOLV="$(echo -n -e $resolv_file | sed '/^$/d')"
			echo -n "$FORM_RESOLV" | dostounix
	?></textarea>
	<hr>
</td></tr>

<tr bgcolor="#<? echo -n $CL1 ?>"><td class="fhead">Domain</td>
<td class="ftail">
	<p>This optionally sets the domain for dnsmasq. If set, it
	does the following.
	<ul>
	<li>Allows DHCP hosts to have fully qualified domain names,<br />
		as long as the domain part matches this setting.</li>
	<li>Sets the "domain" DHCP option, thereby potentially setting<br />
		the domain of all systems configured by DHCP.</li>
	</ul>
	</p>
	<input type="text" size="40" name="DOMAIN"
		value="<? . /tmp/$SESSIONID.vars
				[ -z "$FORM_DOMAIN" ] && FORM_DOMAIN=$domain
				echo -n "$FORM_DOMAIN" ?>"/>
	<p>By declaring domains as local, any DNS-querie about them will stay
	within Dnsmasq and will never be forwarded upstreams. This is a good
	thing for every local network.</p>
<? . /tmp/$SESSIONID.vars; count=$(echo -e $locdom | wc -l) ?>
	<textarea cols="40" rows="<? echo -n $count ?>" name="LOCDOM"
		><? [ -z "$FORM_LOCDOM" ] && \
			FORM_LOCDOM="$(echo -n -e $locdom | sed '/^$/d')"
			echo -n "$FORM_LOCDOM" | dostounix
	?></textarea>
	<hr />
</td></tr>

<tr bgcolor="#<? echo -n $CL2 ?>"><td class="fhead">Interfaces</td>
<td class="ftail"><p>Interfaces should preferably be activated for use with dhcp.
		At present the following interfaces are marked as delivering services.
		An empty field makes Dnsmasq listen on all interfaces, including the
		external interface!</p>
<input type="text" size="40" name="INTERFACES"
	value='<? . /tmp/$SESSIONID.vars
		[ -z "$FORM_INTERFACES" ] && FORM_INTERFACES="$interface"
		echo -n "$FORM_INTERFACES" ?>'/>
<hr />
</td></tr>
</table> <!-- For DNS and DHCP -->

<h2>DHCP leasing</h2>
<p>Basic settings to control ip-address leases.</p>

<table> <!-- DHCP only -->
<tr bgcolor="#<? echo -n $CL3 ?>"><td class="fhead">DHCP-Range</td>
<td class="ftail"><p>To enable DHCP you need to supply a range of addresses
	available for lease, and optionally also a netmask or a lease time.
	A network identity may be prepended in order for the range to affect
	only specific subnets.</p>
<? . /tmp/$SESSIONID.vars; count=$(echo -e $dhcp_range | wc -l) ?>
	<textarea cols="60" rows="<? echo -n $count ?>" name="DHCPRANGE"
		><? [ -z "$FORM_DHCPRANGE" ] && \
			FORM_DHCPRANGE="$(echo -n -e $dhcp_range | sed '/^$/d')"
			echo -n  "$FORM_DHCPRANGE" | dostounix
	?></textarea>
<hr />
</td></tr>

<tr bgcolor="#<? echo -n $CL4 ?>"><td class="fhead">DHCP-Host</td>
<td class="ftail"><p>Hosts identified by their MAC-address can here be arranged
	to receive parameters from the dhcp server, allowing for hostname,
	ip-address, lease time, or an "ignore" statement.  However, this makes
	for only a subset of all possible declaration types.<br />
	An initial hardware address is mandatory, and if present, lease time
	ought to go last, but otherwise the test is forgiving. Use the expert
	mode service, or manual editing of /etc/dnsmasq.conf, for more general
	cases. </p>
<? . /tmp/$SESSIONID.vars; count=$(echo -e "$dhcp_host" | wc -l) ?>
	<textarea cols="60" rows="<? echo -n $count ?>" name="DHCPHOST"
		><? [ -z "$FORM_DHCPHOST" ] && \
			FORM_DHCPHOST="$(echo -n -e $dhcp_host | sed '/^$/d')"
			echo -n  "$FORM_DHCPHOST" | dostounix
	?></textarea>
<hr>
</td></tr>
</table> <!-- DHCP only -->

<h2>&nbsp;</h2>

<table>
<tr><td class="svb"><input type="submit" name="cmd" value="Save"></td>
	<td class="svbtxt">Saves data to the configuration file. Previously
		active items (except domain) will be preserved in the configuration
		file as hash marked comments, thus enabling later manual restoration!
	</td>
</tr>
</table>

<p>
<input type="checkbox" name="delhash" checked="checked" value="yes" />
	Allow removal of previously outcommented items when
	updating multi-line options.<br />
<input type="hidden" name="UI" value="<? echo -n $FORM_UI ?>"/>
</p>

<h1>Daemon status</h1>
<? /var/webconf/lib/svcstat.sh "$FORM_cmd" dnsmasq dnsmasq ?>
</form>

<? rm /tmp/$SESSIONID.*; 
   /var/webconf/lib/footer.sh ?>	
